local M
do
    local ADR = 0x73
    local PAJ7620_ADDR_BASE = 0x00
    local PAJ7620_REGITER_BANK_SEL = PAJ7620_ADDR_BASE + 0xEF
    local PAJ7620_BANK0 = bit.lshift(0,0)
    local GES_RIGHT_FLAG = bit.lshift(1,0)
    local GES_LEFT_FLAG = bit.lshift(1,1)
    local GES_UP_FLAG = bit.lshift(1,2)
    local GES_DOWN_FLAG = bit.lshift(1,3)
    local GES_FORWARD_FLAG = bit.lshift(1,4)
    local GES_BACKWARD_FLAG = bit.lshift(1,5)
    local GES_CLOCKWISE_FLAG = bit.lshift(1,6)
    local GES_COUNT_CLOCKWISE_FLAG = bit.lshift(1,7)
    local GES_WAVE_FLAG = bit.lshift(1,8)
    local GES_REACTION_TIME = 500
    local GES_ENTRY_TIME = 800
    local GES_QUIT_TIME = 1000
    local initRegisterArray = {
        {0xEF,0x00},
        {0x32,0x29},
        {0x33,0x01},
        {0x34,0x00},
        {0x35,0x01},
        {0x36,0x00},
        {0x37,0x07},
        {0x38,0x17},
        {0x39,0x06},
        {0x3A,0x12},
        {0x3F,0x00},
        {0x40,0x02},
        {0x41,0xFF},
        {0x42,0x01},
        {0x46,0x2D},
        {0x47,0x0F},
        {0x48,0x3C},
        {0x49,0x00},
        {0x4A,0x1E},
        {0x4B,0x00},
        {0x4C,0x20},
        {0x4D,0x00},
        {0x4E,0x1A},
        {0x4F,0x14},
        {0x50,0x00},
        {0x51,0x10},
        {0x52,0x00},
        {0x5C,0x02},
        {0x5D,0x00},
        {0x5E,0x10},
        {0x5F,0x3F},
        {0x60,0x27},
        {0x61,0x28},
        {0x62,0x00},
        {0x63,0x03},
        {0x64,0xF7},
        {0x65,0x03},
        {0x66,0xD9},
        {0x67,0x03},
        {0x68,0x01},
        {0x69,0xC8},
        {0x6A,0x40},
        {0x6D,0x04},
        {0x6E,0x00},
        {0x6F,0x00},
        {0x70,0x80},
        {0x71,0x00},
        {0x72,0x00},
        {0x73,0x00},
        {0x74,0xF0},
        {0x75,0x00},
        {0x80,0x42},
        {0x81,0x44},
        {0x82,0x04},
        {0x83,0x20},
        {0x84,0x20},
        {0x85,0x00},
        {0x86,0x10},
        {0x87,0x00},
        {0x88,0x05},
        {0x89,0x18},
        {0x8A,0x10},
        {0x8B,0x01},
        {0x8C,0x37},
        {0x8D,0x00},
        {0x8E,0xF0},
        {0x8F,0x81},
        {0x90,0x06},
        {0x91,0x06},
        {0x92,0x1E},
        {0x93,0x0D},
        {0x94,0x0A},
        {0x95,0x0A},
        {0x96,0x0C},
        {0x97,0x05},
        {0x98,0x0A},
        {0x99,0x41},
        {0x9A,0x14},
        {0x9B,0x0A},
        {0x9C,0x3F},
        {0x9D,0x33},
        {0x9E,0xAE},
        {0x9F,0xF9},
        {0xA0,0x48},
        {0xA1,0x13},
        {0xA2,0x10},
        {0xA3,0x08},
        {0xA4,0x30},
        {0xA5,0x19},
        {0xA6,0x10},
        {0xA7,0x08},
        {0xA8,0x24},
        {0xA9,0x04},
        {0xAA,0x1E},
        {0xAB,0x1E},
        {0xCC,0x19},
        {0xCD,0x0B},
        {0xCE,0x13},
        {0xCF,0x64},
        {0xD0,0x21},
        {0xD1,0x0F},
        {0xD2,0x88},
        {0xE0,0x01},
        {0xE1,0x04},
        {0xE2,0x41},
        {0xE3,0xD6},
        {0xE4,0x00},
        {0xE5,0x0C},
        {0xE6,0x0A},
        {0xE7,0x00},
        {0xE8,0x00},
        {0xE9,0x00},
        {0xEE,0x07},
        {0xEF,0x01},
        {0x00,0x1E},
        {0x01,0x1E},
        {0x02,0x0F},
        {0x03,0x10},
        {0x04,0x02},
        {0x05,0x00},
        {0x06,0xB0},
        {0x07,0x04},
        {0x08,0x0D},
        {0x09,0x0E},
        {0x0A,0x9C},
        {0x0B,0x04},
        {0x0C,0x05},
        {0x0D,0x0F},
        {0x0E,0x02},
        {0x0F,0x12},
        {0x10,0x02},
        {0x11,0x02},
        {0x12,0x00},
        {0x13,0x01},
        {0x14,0x05},
        {0x15,0x07},
        {0x16,0x05},
        {0x17,0x07},
        {0x18,0x01},
        {0x19,0x04},
        {0x1A,0x05},
        {0x1B,0x0C},
        {0x1C,0x2A},
        {0x1D,0x01},
        {0x1E,0x00},
        {0x21,0x00},
        {0x22,0x00},
        {0x23,0x00},
        {0x25,0x01},
        {0x26,0x00},
        {0x27,0x39},
        {0x28,0x7F},
        {0x29,0x08},
        {0x30,0x03},
        {0x31,0x00},
        {0x32,0x1A},
        {0x33,0x1A},
        {0x34,0x07},
        {0x35,0x07},
        {0x36,0x01},
        {0x37,0xFF},
        {0x38,0x36},
        {0x39,0x07},
        {0x3A,0x00},
        {0x3E,0xFF},
        {0x3F,0x00},
        {0x40,0x77},
        {0x41,0x40},
        {0x42,0x00},
        {0x43,0x30},
        {0x44,0xA0},
        {0x45,0x5C},
        {0x46,0x00},
        {0x47,0x00},
        {0x48,0x58},
        {0x4A,0x1E},
        {0x4B,0x1E},
        {0x4C,0x00},
        {0x4D,0x00},
        {0x4E,0xA0},
        {0x4F,0x80},
        {0x50,0x00},
        {0x51,0x00},
        {0x52,0x00},
        {0x53,0x00},
        {0x54,0x00},
        {0x57,0x80},
        {0x59,0x10},
        {0x5A,0x08},
        {0x5B,0x94},
        {0x5C,0xE8},
        {0x5D,0x08},
        {0x5E,0x3D},
        {0x5F,0x99},
        {0x60,0x45},
        {0x61,0x40},
        {0x63,0x2D},
        {0x64,0x02},
        {0x65,0x96},
        {0x66,0x00},
        {0x67,0x97},
        {0x68,0x01},
        {0x69,0xCD},
        {0x6A,0x01},
        {0x6B,0xB0},
        {0x6C,0x04},
        {0x6D,0x2C},
        {0x6E,0x01},
        {0x6F,0x32},
        {0x71,0x00},
        {0x72,0x01},
        {0x73,0x35},
        {0x74,0x00},
        {0x75,0x33},
        {0x76,0x31},
        {0x77,0x01},
        {0x7C,0x84},
        {0x7D,0x03},
        {0x7E,0x01},
    }
    
    -- Write data
    --      addr : reg adress
    --      cmd : function data
    local paj7620WriteReg = function(addr, cmd)
        i2c.start(0)
        i2c.address(0, ADR, i2c.TRANSMITTER)
        i2c.write(0, addr)
        i2c.write(0,cmd)
        i2c.stop(0)
    end
    
    -- Read reg data
    --      addr : reg address
    -- return : readed data (1 byte)
    local paj7620ReadReg = function(addr)
        i2c.start(0)
        i2c.address(0, ADR, i2c.TRANSMITTER)
        i2c.write(0, addr)
        i2c.stop(0)        
        i2c.start(0)
        i2c.address(0, ADR, i2c.RECEIVER)
        local data = i2c.read(0,1)
        i2c.stop(0)
        return string.byte(data)
    end

    -- Init sensor
    local paj7620Init = function()
        --i2c.start(0)
        print("Init gestual sensor...")
        paj7620WriteReg(PAJ7620_REGITER_BANK_SEL, PAJ7620_BANK0);
        paj7620WriteReg(PAJ7620_REGITER_BANK_SEL, PAJ7620_BANK0);
        local data0 = paj7620ReadReg(0,1)
        local data1 = paj7620ReadReg(1,1)
        print("Addr0 = 0x"..string.format("%x", data0))
        print("Addr1 = 0x"..string.format("%x", data1))
        if ((data0~= 0x20) or (data1)~=0x76) then
            print("Error!!!")
            return false
        elseif data0 == 0x20 then
            print("wake-up finish.")
        end
        for k, c in ipairs(initRegisterArray) do
            paj7620WriteReg(c[1], c[2])
        end
        paj7620WriteReg(PAJ7620_REGITER_BANK_SEL, PAJ7620_BANK0);
        print("Paj7620 initialize register finished.")
        return true
    end
    -- scan the gestual sensor
    --  paramÃ¨tres : 
    --      - alarme_id : 0-6 alarme id
    --      - alarme_time : time between sensors read
    --      - callback : callback function with geste as parameter
    local scan = function(alarm_id, alarm_time, callback)
        tmr.alarm(alarm_id, alarm_time, tmr.ALARM_AUTO, function ()
            local data = paj7620ReadReg(0x43) + paj7620ReadReg(0x44)*256
            if data ~= 0 then
                tmr.stop(alarm_id)
                if data >= GES_FORWARD_FLAG then
                    callback(data)
                else
                    tmr.delay(GES_ENTRY_TIME)
                    data2=paj7620ReadReg(0x43)
                    if data2 == 0 then
                        callback(data)
                    else
                        callback(data2)
                    end
                end
                tmr.delay(GES_QUIT_TIME)
                tmr.start(alarm_id)
            end
        end)
    end
    
    local init = function(adr)
        ADR = adr or 0x73
        print("Init PAJ7620 at 0x"..string.format("%x", ADR))
        paj7620Init()
        return {
            write = paj7620WriteReg,
            read = paj7620ReadReg,
            scan = scan
        }
    end
    M = init
    print("Heap : " .. node.heap())
end
return M
